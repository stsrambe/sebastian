/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package todolistapp;

import javax.swing.*;
import java.awt.event.*;
import java.util.List;
import todolistapp.Task;
/**
 *
 * @author Namo
 */
public class ViewToDo extends javax.swing.JFrame {

    private ToDoListApp toDoListApp;
    private DefaultListModel<String> taskListModel;
    private JList<String> taskList;

    /**
     * Creates new form ViewToDo
     */
    public ViewToDo() {
        toDoListApp = new ToDoListApp();
        initializeComponentsCustom();
    }

     private void initializeComponentsCustom() {
        JLabel titleLabel = new JLabel("Aplikasi ToDo List");
        taskListModel = new DefaultListModel<>();
        taskList = new JList<>(taskListModel);
        
        JTextField taskInputField = new JTextField(20);
        JButton addButton = new JButton("Tambah Tugas");
        JButton editButton = new JButton("Edit Tugas");
        JButton deleteButton = new JButton("Hapus Tugas");
        JButton completeButton = new JButton("Tandai Selesai");
        JButton searchButton = new JButton("Cari Tugas");
        JTextField searchField = new JTextField(10);
        
          addButton.addActionListener(e -> {
            String title = taskInputField.getText();
            if (!title.isEmpty()) {
                toDoListApp.addTask(title);
                refreshTaskList();
                taskInputField.setText("");
            } else {
                JOptionPane.showMessageDialog(this, "Masukkan judul tugas!");
            }
        });
          
            editButton.addActionListener(e -> {
            int index = taskList.getSelectedIndex();
            if (index != -1) {
                String newTitle = JOptionPane.showInputDialog(this, "Masukkan judul baru:");
                if (newTitle != null && !newTitle.isEmpty()) {
                    toDoListApp.editTask(index, newTitle);
                    refreshTaskList();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Pilih tugas yang ingin diedit!");
            }
        });
            
             deleteButton.addActionListener(e -> {
            int index = taskList.getSelectedIndex();
            if (index != -1) {
                toDoListApp.deleteTask(index);
                refreshTaskList();
            } else {
                JOptionPane.showMessageDialog(this, "Pilih tugas yang ingin dihapus!");
            }
        });
             
               completeButton.addActionListener(e -> {
            int index = taskList.getSelectedIndex();
            if (index != -1) {
                toDoListApp.markTaskAsCompleted(index);
                refreshTaskList();
            } else {
                JOptionPane.showMessageDialog(this, "Pilih tugas yang ingin ditandai selesai!");
            }
        });

        searchButton.addActionListener(e -> {
            String keyword = searchField.getText();
            if (!keyword.isEmpty()) {
                searchTasks(keyword);
            } else {
                JOptionPane.showMessageDialog(this, "Masukkan kata kunci pencarian!");
            }
        });

        setLayout(new BoxLayout(getContentPane(), BoxLayout.Y_AXIS));
        add(titleLabel);
        add(new JScrollPane(taskList));
        add(taskInputField);
        add(addButton);
        add(editButton);
        add(deleteButton);
        add(completeButton);
        add(new JLabel("Pencarian:"));
        add(searchField);
        add(searchButton);

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setTitle("ToDo List App");
        setSize(400, 300);
        setLocationRelativeTo(null);
        refreshTaskList();
    }

    private void refreshTaskList() {
        taskListModel.clear();
        List<Task> tasks = toDoListApp.getTasks();
        for (Task task : tasks) {
            taskListModel.addElement(task.toString());
        }
    }
    
    private void searchTasks(String keyword) {
        taskListModel.clear();
        for (int i = 0; i < toDoListApp.getTasks().size(); i++) {
            Task task = toDoListApp.getTasks().get(i);
            if (task.getTitle().toLowerCase().contains(keyword.toLowerCase())) {
                taskListModel.addElement(task.toString());
            }
        }
        if (taskListModel.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tugas dengan kata kunci '" + keyword + "' tidak ditemukan.");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
         SwingUtilities.invokeLater(() -> new ViewToDo().setVisible(true));
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewToDo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewToDo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewToDo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewToDo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }
}
        //</editor-fold>

        /* Create and display the form */
      
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

